version: '3.9'

services:
  nginx:
    image: macbre/nginx-http3:1.23.1
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    #   - ../frontend/public/:/usr/share/nginx/html/
      - ../nginx/out/crypto/cert.pem:/etc/car_accounting.com/cert.pem
      - ../nginx/out/crypto/key.pem:/etc/car_accounting.com/key.pem
    networks:
      - api-gateaway
      - backend
      - database_admin
    ports:
      - 443:443/tcp
      - 443:443/udp
      - 80:80/tcp
      - 80:80/udp
    depends_on:
      - car-accounting
      - pgadmin
    restart: always

  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      SCRIPT_NAME: /admin
    expose:
      - 80
    # ports:
    #   - 5050:80
    networks:
      - database
      - database_admin


  postgres-db:
    build:
      context: ./database_postgres
      # dockerfile: ./database_postgres/Dockerfile
    container_name: postgres-db-cw
    env_file:
      - ./database_postgres/.env
    networks:
      - database
    expose:
      - 5432
    # ports:
    #   - 5432:5432
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    # restart: unless-stopped

  car-accounting:
    # container_name: web-api-app
    # image: mcr.microsoft.com/dotnet/sdk:6.0
    build:
      dockerfile: ../../backend/appdoc/Dockerfile
      context: ../CarAccountingProject/Components
    networks:
      - backend
      - database
    expose:
      - 5001
    restart: always
    depends_on: 
      [postgres-db]
    # volumes:
      # - ../CarAccountingProject/Components:/app
      # - ../CarAccountingProject/Components/UI/API:/app
      # - ../CarAccountingProject/Components/UI:/UI
      # - ../CarAccountingProject/Components/BL:/BL
      # - ../CarAccountingProject/Components/DB:/DB
    # cmd: dotnet run --urls http://localhost:5001
    # command: dotnet run --urls http://*:5001
    # ports:
    #   - 5001:5001
    deploy:
      mode: replicated
      replicas: 3

networks:
  api-gateaway:
    driver: bridge

  backend:
    driver: bridge
    internal: true

  database:
    driver: bridge
    internal: true

  database_admin:
    driver: bridge
    internal: true
